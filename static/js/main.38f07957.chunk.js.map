{"version":3,"sources":["components/layout/Navbar.js","components/Home.js","components/Course.js","editor-tools.js","components/Note.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","handleItemClick","e","name","setState","activeItem","this","Menu","Item","active","onClick","as","Link","to","position","Component","Home","className","Card","Group","fluid","color","header","Button","Course","id","useParams","EDITOR_JS_TOOLS","embed","Embed","table","Table","marker","Marker","list","List","warning","Warning","code","Code","linkTool","LinkTool","image","Image","raw","Raw","Header","quote","Quote","checklist","CheckList","delimiter","Delimiter","inlineCode","InlineCode","simpleImage","SimpleImage","Note","Container","tools","onReady","console","log","onData","data","time","blocks","type","text","level","version","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38f07957.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport {\n  Link\n} from \"react-router-dom\";\n\nexport class Navbar extends Component {\n  state = {};\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Menu>\n        <Menu.Item\n          name=\"editorials\"\n          active={activeItem === \"editorials\"}\n          onClick={this.handleItemClick}\n          as={Link}\n          to=\"/\"\n        >\n          My Page\n        </Menu.Item>\n\n        <Menu.Item\n          name=\"reviews\"\n          active={activeItem === \"reviews\"}\n          onClick={this.handleItemClick}\n        >\n          Courses\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          <Menu.Item\n            name=\"upcomingEvents\"\n            active={activeItem === \"upcomingEvents\"}\n            onClick={this.handleItemClick}\n          >\n            Sign In\n          </Menu.Item>\n        </Menu.Menu>\n      </Menu>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport { Button, Card } from \"semantic-ui-react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n  // useRouteMatch,\n  // useParams\n} from \"react-router-dom\";\nexport function Home() {\n  return (\n    <div className=\"courselist\">\n      <div className=\"Courses\">\n        <Card.Group>\n          <Card as={Link} to=\"/course/1\" fluid color=\"red\" header=\"Course A\" />\n          <Card\n            as={Link}\n            to=\"/course/2\"\n            fluid\n            color=\"orange\"\n            header=\"Course B\"\n          />\n          <Card as={Link} to=\"/course/3\" fluid color=\"blue\" header=\"Course C\" />\n        </Card.Group>\n        <Button>Add course</Button>\n      </div>\n      <div className=\"Courses\">\n        <Card.Group>\n          <Card as={Link} to=\"/note/1\" fluid color=\"red\" header=\"Note A\" />\n          <Card as={Link} to=\"/note/2\" fluid color=\"orange\" header=\"Note B\" />\n          <Card as={Link} to=\"/note/3\" fluid color=\"yellow\" header=\"Note C\" />\n        </Card.Group>\n        <Button>Add note</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Card } from \"semantic-ui-react\";\n\nexport function Course() {\n  let { id } = useParams();\n  return (\n    <div>\n      <h3> Course ID: {id}</h3>\n      <div className=\"Courses\">\n        <Card.Group>\n          <Card fluid color=\"red\" header=\"Note 1\" />\n          <Card fluid color=\"orange\" header=\"Note 2\" />\n          <Card fluid color=\"yellow\" header=\"Note 3\" />\n        </Card.Group>\n      </div>\n    </div>\n  );\n}\n\nexport default Course;\n","import Embed from '@editorjs/embed'\nimport Table from '@editorjs/table'\nimport List from '@editorjs/list'\nimport Warning from '@editorjs/warning'\nimport Code from '@editorjs/code'\nimport LinkTool from '@editorjs/link'\nimport Image from '@editorjs/image'\nimport Raw from '@editorjs/raw'\nimport Header from '@editorjs/header'\nimport Quote from '@editorjs/quote'\nimport Marker from '@editorjs/marker'\nimport CheckList from '@editorjs/checklist'\nimport Delimiter from '@editorjs/delimiter'\nimport InlineCode from '@editorjs/inline-code'\nimport SimpleImage from '@editorjs/simple-image'\n\nexport const EDITOR_JS_TOOLS = {\n\tembed: Embed,\n\ttable: Table,\n\tmarker: Marker,\n\tlist: List,\n\twarning: Warning,\n\tcode: Code,\n\tlinkTool: LinkTool,\n\timage: Image,\n\traw: Raw,\n\theader: Header,\n\tquote: Quote,\n\tchecklist: CheckList,\n\tdelimiter: Delimiter,\n\tinlineCode: InlineCode,\n\tsimpleImage: SimpleImage,\n}\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Editor from \"@stfy/react-editor.js\";\nimport { EDITOR_JS_TOOLS } from \"../editor-tools\";\nimport { Container } from \"semantic-ui-react\";\n\nexport function Note() {\n  let { id } = useParams();\n  return (\n    <Container>\n      <Editor\n        tools={EDITOR_JS_TOOLS}\n        onReady={() => console.log(\"Start Editor 1!\")}\n        onData={e => console.log(\"data\", e)}\n        data={{\n          time: 1569611146631,\n          blocks: [\n            {\n              type: \"header\",\n              data: {\n                text: `Lecture ${id}`,\n                level: 1\n              }\n            },\n            {\n              type: \"header\",\n              data: {\n                text: \"Sorting Algorithms\",\n                level: 2\n              }\n            },\n            {\n              type: \"header\",\n              data: {\n                text: \"Bubble sort\",\n                level: 3\n              }\n            },\n            {\n              type: \"paragraph\",\n              data: {\n                text: \"Write here!\"\n              }\n            },\n            {\n              type: \"header\",\n              data: {\n                text: \"Insertion sort\",\n                level: 3\n              }\n            },\n            {\n              type: \"paragraph\",\n              data: {\n                text: \"Write here!\"\n              }\n            },\n            {\n              type: \"header\",\n              data: {\n                text: \"Time Complexity\",\n                level: 3\n              }\n            },\n            {\n              type: \"paragraph\",\n              data: {\n                text: \"Write here!\"\n              }\n            }\n          ],\n          version: \"2.15.0\"\n        }}\n      />\n    </Container>\n  );\n}\n\nexport default Note;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Navbar } from \"./components/layout/Navbar\";\nimport { Home } from \"./components/Home\";\nimport { Course } from \"./components/Course\";\nimport { Note } from \"./components/Note\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n      </div>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/course/:id\">\n          <Course />\n        </Route>\n        <Route path=\"/note/:id\">\n          <Note />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}