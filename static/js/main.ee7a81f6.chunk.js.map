{"version":3,"sources":["editor-tools.js","App.js","serviceWorker.js","index.js"],"names":["EDITOR_JS_TOOLS","embed","Embed","table","Table","marker","Marker","list","List","warning","Warning","code","Code","linkTool","LinkTool","image","Image","raw","Raw","header","Header","quote","Quote","checklist","CheckList","delimiter","Delimiter","inlineCode","InlineCode","simpleImage","SimpleImage","App","className","tools","onReady","console","log","onData","e","placeholder","data","time","blocks","type","text","level","version","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ifAgBaA,EAAkB,CAC9BC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,KAAMC,IACNC,QAASC,IACTC,KAAMC,IACNC,SAAUC,IACVC,MAAOC,IACPC,IAAKC,IACLC,OAAQC,IACRC,MAAOC,IACPC,UAAWC,IACXC,UAAWC,IACXC,WAAYC,IACZC,YAAaC,KCwBCC,MAlDf,WACC,OACC,yBAAKC,UAAU,OACd,sCACA,yBAAKA,UAAU,UACd,kBAAC,IAAD,CACCC,MAAOjC,EACPkC,QAAS,kBAAMC,QAAQC,IAAI,WAC3BC,OAAQ,SAAAC,GAAC,OAAIH,QAAQC,IAAI,OAAQE,IACjCC,YAAY,gCACZC,KAAM,CACLC,KAAM,cACNC,OAAQ,CACP,CACCC,KAAM,SACNH,KAAM,CACLI,KAAM,gBACNC,MAAO,KAIVC,QAAS,aAIZ,yBAAKd,UAAU,UACd,kBAAC,IAAD,CACCC,MAAOjC,EACPkC,QAAS,kBAAMC,QAAQC,IAAI,WAC3BC,OAAQ,SAAAC,GAAC,OAAIH,QAAQC,IAAI,OAAQE,IACjCC,YAAY,gCACZC,KAAM,CACLC,KAAM,cACNC,OAAQ,CACP,CACCC,KAAM,SACNH,KAAM,CACLI,KAAM,gBACNC,MAAO,KAIVC,QAAS,eCnCKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee7a81f6.chunk.js","sourcesContent":["import Embed from '@editorjs/embed'\nimport Table from '@editorjs/table'\nimport List from '@editorjs/list'\nimport Warning from '@editorjs/warning'\nimport Code from '@editorjs/code'\nimport LinkTool from '@editorjs/link'\nimport Image from '@editorjs/image'\nimport Raw from '@editorjs/raw'\nimport Header from '@editorjs/header'\nimport Quote from '@editorjs/quote'\nimport Marker from '@editorjs/marker'\nimport CheckList from '@editorjs/checklist'\nimport Delimiter from '@editorjs/delimiter'\nimport InlineCode from '@editorjs/inline-code'\nimport SimpleImage from '@editorjs/simple-image'\n\nexport const EDITOR_JS_TOOLS = {\n\tembed: Embed,\n\ttable: Table,\n\tmarker: Marker,\n\tlist: List,\n\twarning: Warning,\n\tcode: Code,\n\tlinkTool: LinkTool,\n\timage: Image,\n\traw: Raw,\n\theader: Header,\n\tquote: Quote,\n\tchecklist: CheckList,\n\tdelimiter: Delimiter,\n\tinlineCode: InlineCode,\n\tsimpleImage: SimpleImage,\n}\n","import React from 'react'\nimport './App.css'\nimport Editor from '@stfy/react-editor.js'\nimport { EDITOR_JS_TOOLS } from './editor-tools'\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1>CoNote</h1>\n\t\t\t<div className='Editor'>\n\t\t\t\t<Editor\n\t\t\t\t\ttools={EDITOR_JS_TOOLS}\n\t\t\t\t\tonReady={() => console.log('Start!')}\n\t\t\t\t\tonData={e => console.log('data', e)}\n\t\t\t\t\tplaceholder='Let`s write an awesome story!'\n\t\t\t\t\tdata={{\n\t\t\t\t\t\ttime: 1569611146631,\n\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'header',\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\ttext: 'Lecture Title',\n\t\t\t\t\t\t\t\t\tlevel: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tversion: '2.15.0',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className='Editor'>\n\t\t\t\t<Editor\n\t\t\t\t\ttools={EDITOR_JS_TOOLS}\n\t\t\t\t\tonReady={() => console.log('Start!')}\n\t\t\t\t\tonData={e => console.log('data', e)}\n\t\t\t\t\tplaceholder='Let`s write an awesome story!'\n\t\t\t\t\tdata={{\n\t\t\t\t\t\ttime: 1569611146631,\n\t\t\t\t\t\tblocks: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'header',\n\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\ttext: 'Lecture Title',\n\t\t\t\t\t\t\t\t\tlevel: 1,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tversion: '2.15.0',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}